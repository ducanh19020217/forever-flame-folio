// useAutoScroll.ts
import { useEffect, useRef, useState, RefObject, useCallback } from "react";

type BottomStrategy = "stop" | "loop" | "bounce";

interface AutoScrollOptions {
    speed?: number;                 // px/s
    resumeDelayMs?: number;         // th·ªùi gian t·∫°m d·ª´ng sau t∆∞∆°ng t√°c user
    enabled?: boolean;
    containerRef?: RefObject<HTMLElement>; // n·∫øu kh√¥ng truy·ªÅn -> cu·ªôn window
    bottomStrategy?: BottomStrategy; // d·ª´ng | l·∫∑p t·ª´ ƒë·∫ßu | b·∫≠t n·∫£y
    respectReducedMotion?: boolean;  // m·∫∑c ƒë·ªãnh true
    maxFPS?: number | null;          // v√≠ d·ª• 60; null = kh√¥ng gi·ªõi h·∫°n
}

export const useAutoScroll = ({
                                  speed = 120,
                                  resumeDelayMs = 2000,
                                  enabled = true,
                                  containerRef,
                                  bottomStrategy = "stop",
                                  respectReducedMotion = true,
                                  maxFPS = 60,
                              }: AutoScrollOptions = {}) => {
    const [isActive, setIsActive] = useState<boolean>(enabled);

    // --- refs n·ªôi b·ªô (kh√¥ng g√¢y re-render) ---
    const speedRef = useRef(speed);
    const dirRef = useRef<1 | -1>(1);
    const rafRef = useRef<number | null>(null);
    const lastTsRef = useRef<number>(0);
    const accRef = useRef<number>(0);               // t√≠ch l≈©y sub-pixel
    const pausedUntilRef = useRef<number>(0);
    const resumeTimerRef = useRef<number | null>(null);
    const programmaticRef = useRef<boolean>(false);
    const userIntentUntilRef = useRef<number>(0);
    const frameMinInterval = maxFPS ? (1000 / maxFPS) : 0;

    // --- ch·ªëng stale state & ki·ªÉm so√°t resume ---
    const isActiveRef = useRef<boolean>(isActive);
    const autoPausedRef = useRef<boolean>(false);
    useEffect(() => { isActiveRef.current = isActive; }, [isActive]);

    // --- ch·ªëng flicker: tr√°nh ghi tr√πng v·ªã tr√≠ ---
    const lastWriteYRef = useRef<number>(-1);

    const now = () => performance.now();
    const isWindowMode = !containerRef?.current;

    // ƒê·ªçc v·ªã tr√≠ hi·ªán t·∫°i
    const readTop = () => {
        if (!isWindowMode) return containerRef!.current!.scrollTop;
        return (
            window.pageYOffset ??
            document.documentElement.scrollTop ??
            document.body.scrollTop ??
            0
        );
    };

    // ƒê·ªçc k√≠ch th∆∞·ªõc scroll/viewport
    const readDims = () => {
        if (!isWindowMode) {
            const el = containerRef!.current!;
            return { scrollHeight: el.scrollHeight, clientHeight: el.clientHeight };
        }
        const docEl = document.documentElement;
        const body = document.body;
        const scrollHeight = Math.max(docEl?.scrollHeight || 0, body?.scrollHeight || 0);
        const clientHeight = window.innerHeight; // iOS thay ƒë·ªïi khi address bar co/gi√£n
        return { scrollHeight, clientHeight };
    };

    // Cu·ªôn t·ªõi v·ªã tr√≠ y (tr√°nh ghi tr√πng ƒë·ªÉ kh√¥ng repaint v√¥ √≠ch)
    const scrollToY = (y: number) => {
        const cur = readTop();
        if (Math.round(cur) === Math.round(y)) return; // üö´ tr√°nh flicker
        programmaticRef.current = true;
        if (!isWindowMode) containerRef!.current!.scrollTop = y;
        else window.scrollTo(0, y);
        lastWriteYRef.current = y;
        queueMicrotask(() => { programmaticRef.current = false; });
    };

    const scrollByInt = (dyInt: number) => {
        if (dyInt === 0) return; // kh√¥ng ghi n·∫øu kh√¥ng c·∫ßn
        scrollToY(readTop() + dyInt);
    };

    // ƒê·ªìng b·ªô t·ªëc ƒë·ªô runtime
    useEffect(() => { speedRef.current = Math.max(0, speed); }, [speed]);

    // Resume sau khi user d·ª´ng t∆∞∆°ng t√°c
    const requestResume = useCallback(() => {
        if (resumeTimerRef.current) clearTimeout(resumeTimerRef.current);
        resumeTimerRef.current = window.setTimeout(() => {
            pausedUntilRef.current = 0;
            if (!enabled) return;

            if (autoPausedRef.current && !isActiveRef.current) {
                // reset ‚Äúƒë√†‚Äù ƒë·ªÉ frame ƒë·∫ßu m∆∞·ª£t, tr√°nh nh·∫£y 1px
                accRef.current = 0;
                lastWriteYRef.current = -1;

                setIsActive(true);
                autoPausedRef.current = false;
                tick();
            }
        }, resumeDelayMs) as unknown as number;
    }, [resumeDelayMs, enabled]); // kh√¥ng ph·ª• thu·ªôc isActive (tr√°nh stale)

    // Pause do user (wheel/touch/pointer/keyboard)
    const pauseForUser = useCallback(() => {
        if (isActiveRef.current) setIsActive(false);
        autoPausedRef.current = true;
        accRef.current = 0;            // reset ƒë√† ƒë·ªÉ resume m∆∞·ª£t
        lastWriteYRef.current = -1;
        pausedUntilRef.current = now() + resumeDelayMs;
        requestResume();
    }, [requestResume, resumeDelayMs]);

    const markUserIntent = () => { userIntentUntilRef.current = now() + 120; };

    // Listeners: pause theo intent, kh√¥ng pause theo event "scroll"
    useEffect(() => {
        if (!enabled) return;

        const onWheel = () => { markUserIntent(); pauseForUser(); };
        const onTouchStart = () => { markUserIntent(); pauseForUser(); };
        const onTouchMove = () => { markUserIntent(); pauseForUser(); };
        const onPointerDown = () => { markUserIntent(); pauseForUser(); };
        const onKeyDown = (e: KeyboardEvent) => {
            if (["ArrowUp","ArrowDown","PageUp","PageDown","Home","End"," ","Space"].includes(e.key)) {
                markUserIntent(); pauseForUser();
            }
        };
        const onScroll = () => { /* c·ªë √Ω kh√¥ng pause theo scroll ƒë·ªÉ tr√°nh gi·∫≠t */ };

        const el = isWindowMode ? window : containerRef!.current!;
        el.addEventListener("wheel", onWheel, { passive: true });
        el.addEventListener("touchstart", onTouchStart, { passive: true });
        el.addEventListener("touchmove", onTouchMove, { passive: true });
        el.addEventListener("pointerdown", onPointerDown, { passive: true });
        el.addEventListener("scroll", onScroll, { passive: true });
        window.addEventListener("keydown", onKeyDown); // kh√¥ng d√πng passive cho keydown

        return () => {
            el.removeEventListener("wheel", onWheel);
            el.removeEventListener("touchstart", onTouchStart);
            el.removeEventListener("touchmove", onTouchMove);
            el.removeEventListener("pointerdown", onPointerDown);
            el.removeEventListener("scroll", onScroll);
            window.removeEventListener("keydown", onKeyDown);
            if (resumeTimerRef.current) clearTimeout(resumeTimerRef.current);
        };
    }, [enabled, pauseForUser, isWindowMode, containerRef]);

    // Visibility: khi tab quay l·∫°i, resume m·ªÅm
    useEffect(() => {
        if (!enabled) return;
        const onVis = () => {
            if (document.visibilityState === "hidden") {
                if (isActiveRef.current) setIsActive(false);
            } else {
                pausedUntilRef.current = now() + 250;
                requestResume();
            }
        };
        document.addEventListener("visibilitychange", onVis);
        return () => document.removeEventListener("visibilitychange", onVis);
    }, [enabled, requestResume]);

    // V√≤ng l·∫∑p rAF
    const tick = useCallback(() => {
        if (rafRef.current != null) cancelAnimationFrame(rafRef.current);
        lastTsRef.current = 0;

        const frame = (ts: number) => {
            if (!isActiveRef.current || !enabled) return;

            if (respectReducedMotion && window.matchMedia?.("(prefers-reduced-motion: reduce)")?.matches) {
                return;
            }

            if (lastTsRef.current === 0) {
                lastTsRef.current = ts;
                rafRef.current = requestAnimationFrame(frame);
                return;
            }

            const dtMs = ts - lastTsRef.current;
            if (frameMinInterval && dtMs < frameMinInterval) {
                rafRef.current = requestAnimationFrame(frame);
                return;
            }

            const dt = Math.min(dtMs / 1000, 0.05); // clamp ƒë·ªÉ tr√°nh nh·∫£y v·ªçt
            lastTsRef.current = ts;

            if (pausedUntilRef.current && now() < pausedUntilRef.current) {
                rafRef.current = requestAnimationFrame(frame);
                return;
            }

            const { scrollHeight, clientHeight } = readDims();
            const maxScroll = Math.max(0, scrollHeight - clientHeight);
            const y = readTop();

            // t√≠ch l≈©y + ch·ªâ cu·ªôn s·ªë nguy√™n px
            accRef.current += speedRef.current * dt * dirRef.current;
            const deltaInt = accRef.current > 0 ? Math.floor(accRef.current) : Math.ceil(accRef.current);
            accRef.current -= deltaInt;

            // tolerance l·ªõn h∆°n cho iOS (address bar co/gi√£n)
            const TOL = 6;
            const atBottom = y >= maxScroll - TOL;
            const atTop = y <= TOL;

            // Ch·∫°m ƒë√°y
            if (dirRef.current === 1 && atBottom) {
                if (bottomStrategy === "stop") {
                    // h·∫° c√°nh m·ªÅm: ƒë·∫£m b·∫£o ch·ªët v·ªÅ ƒë√∫ng maxScroll r·ªìi m·ªõi t·∫Øt ·ªü frame sau
                    if (Math.round(y) !== Math.round(maxScroll)) scrollToY(maxScroll);
                    rafRef.current = requestAnimationFrame(() => {
                        setIsActive(false);
                    });
                    return;
                } else if (bottomStrategy === "loop") {
                    scrollToY(0);
                } else {
                    dirRef.current = -1; // bounce
                }
            }
            // Ch·∫°m ƒë·ªânh khi ƒëang ƒëi l√™n
            else if (dirRef.current === -1 && atTop) {
                if (bottomStrategy === "bounce") dirRef.current = 1;
            }
            // B√¨nh th∆∞·ªùng th√¨ cu·ªôn
            else {
                if (deltaInt !== 0) {          // tr√°nh ghi tr√πng ‚Üí gi·∫£m flicker
                    scrollByInt(deltaInt);
                }
            }

            rafRef.current = requestAnimationFrame(frame);
        };

        rafRef.current = requestAnimationFrame(frame);
    }, [enabled, bottomStrategy, respectReducedMotion, frameMinInterval]);

    // ƒê·ªìng b·ªô enabled -> isActive v√† kick loop
    useEffect(() => {
        setIsActive(enabled);
        isActiveRef.current = enabled;
        if (enabled) tick();
        else if (rafRef.current) cancelAnimationFrame(rafRef.current);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [enabled]);

    // Public API
    const start = useCallback(() => {
        if (!isActiveRef.current) {
            setIsActive(true);
            isActiveRef.current = true;
            // reset ƒë√† khi start th·ªß c√¥ng ƒë·ªÉ frame ƒë·∫ßu m∆∞·ª£t
            accRef.current = 0;
            lastWriteYRef.current = -1;
            tick();
        }
    }, [tick]);

    const stop = useCallback(() => {
        if (isActiveRef.current) setIsActive(false);
        autoPausedRef.current = false;   // stop th·ªß c√¥ng ‚Üí kh√¥ng auto resume
        isActiveRef.current = false;
        if (rafRef.current) cancelAnimationFrame(rafRef.current);
    }, []);

    const setSpeed = (v: number) => { speedRef.current = Math.max(0, v); };

    return { isActive, start, stop, setSpeed };
};
